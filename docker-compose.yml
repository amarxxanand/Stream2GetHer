version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: stream2gether-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: stream2gether
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - stream2gether-network

  # Backend Server
  backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: stream2gether-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/stream2gether?authSource=admin
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
    networks:
      - stream2gether-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client
  frontend:
    build: 
      context: ./client
      dockerfile: Dockerfile
    container_name: stream2gether-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - stream2gether-network

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: stream2gether-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - stream2gether-network

volumes:
  mongodb_data:
    driver: local

networks:
  stream2gether-network:
    driver: bridge
